/*
Package sortition implements the Sortition-related tools.
VRF is used to draw sortition among the cluster.
*/
package sortition

import (
	"crypto/ed25519"
	"errors"
	"fmt"
	"github.com/hashicorp/go-hclog"
	"github.com/yoseplee/vrf"
	"math/big"
)

// Sortitioner defines the fields to take part in a sortition.
type Sortitioner struct {
	threshold float64
	logger    hclog.Logger
	pubKey    ed25519.PublicKey
	privKey   ed25519.PrivateKey
}

// NewSortitioner creates a sortitioner from some arguments.
func NewSortitioner(threshold float64, pubKey ed25519.PublicKey, privKey ed25519.PrivateKey) (*Sortitioner, error) {
	if threshold < 0 || threshold > 1 {
		return nil, errors.New("threshold is not valid")
	}
	return &Sortitioner{
		threshold: threshold,
		logger: hclog.New(&hclog.LoggerOptions{
			Name:   "yimchain-sortition",
			Output: hclog.DefaultOutput,
			Level:  hclog.DefaultLevel,
		}),
		pubKey:  pubKey,
		privKey: privKey,
	}, nil
}

// Once checks if a node can win the sortition given the number.
func (s *Sortitioner) Once(num uint64) (bool, []byte) {
	numAsString := fmt.Sprintf("%d", num)
	proof, output, err := vrf.Prove(s.pubKey, s.privKey, []byte(numAsString))
	if err != nil {
		s.logger.Error("fail to run sortition", "error", err)
		return false, nil
	}
	ratio := s.HashRatio(output)
	if ratio < s.threshold {
		return true, proof
	} else {
		return false, nil
	}
}

// HashRatio calculates a float number between [0, 1] with a random hash value which generated by sortition.
func (s *Sortitioner) HashRatio(vrfOutput []byte) float64 {

	t := &big.Int{}
	t.SetBytes(vrfOutput[:])

	precision := uint(8 * (len(vrfOutput) + 1))
	max, b, err := big.ParseFloat("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 0, precision, big.ToNearestEven)
	if b != 16 || err != nil {
		s.logger.Error("fail to parse big float constant for sortition", "error", err)
	}

	//hash value as int expression.
	//hval, _ := h.Float64() to get the value
	h := big.Float{}
	h.SetPrec(precision)
	h.SetInt(t)

	ratio := big.Float{}
	cratio, _ := ratio.Quo(&h, max).Float64()

	return cratio
}


// SortitionMsg defines the sortition result of a particular height and round.
// In particular, the result usually has a value of 'false'
type SortitionMsg struct {
	Sortitioner  string
	Height       uint64
	Round		 uint64
	Result		 bool
}

func NewSortitionMsg(node string, height, round uint64) SortitionMsg {
	return SortitionMsg{
		Sortitioner: node,
		Height:      height,
		Round:       round,
		Result:      false,
	}
}